<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="community">
	<!-- 커뮤니티 타입 목록 -->
	<select id="getCommunityTypeMap" resultType="CommunityType">
		SELECT COMMUNITY_CD AS "communityCd", COMMUNITY_NAME AS communityName
		FROM COMMUNITY_TYPE
	</select>

	<!-- 게시글 수 조회 -->
	<select id="selectListCount" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM BOARD_COMMUNITY C
		LEFT JOIN USER_TB U	USING(USER_NUM)
		<where>
		<if test="keyword != null and keyword != '' ">
			AND
			<choose>
				<when test="condition != null and condition.equals('title')">
					C.TITLE LIKE '%' || #{keyword} || '%'
				</when>
				<when test="condition != null and condition.equals('writer')">
					U.NICK_NAME LIKE '%' || #{keyword} || '%'
				</when>
				<when test="condition != null and condition.equals('content')">
					C.CONTENT LIKE '%' || #{keyword} || '%'
				</when>
				<when test="condition != null and condition.equals('titleAndContent')">
					(C.TITLE LIKE '%' || #{keyword} || '%' OR
					C.CONTENT
					LIKE '%' || #{keyword} || '%' )
				</when>
				<otherwise>
                    (C.TITLE LIKE '%' || #{keyword} || '%' OR C.CONTENT LIKE '%' || #{keyword} || '%')
                </otherwise>
			</choose>
		</if>
		<if test="category != null and category.size() > 0">
		       AND C.COMMUNITY_CD IN
		       <foreach collection="category" item="cat" open="(" separator="," close=")">
		           #{cat}
		       </foreach>
		   </if> 
		</where>
	</select>


	<!-- 게시글 목록 조회 -->
	<select id="selectList" parameterType="map" resultType="community">
		SELECT 
			C.COMMUNITY_BOARD_ID AS communityNo, 
			C.TITLE AS communityTitle, 
			C.COMMUNITY_CD AS communityCd,
			U.NICK_NAME AS communityNickname,
			C.WRITE_DATE AS writeDate, 
			C.VIEWS AS views,
			(
				SELECT COUNT(*)
				FROM REACTION R
				WHERE R.TARGET_ID = C.COMMUNITY_BOARD_ID
				AND R.REACTION_TYPE = 'LIKE'
			) AS recommendCount
		FROM BOARD_COMMUNITY C
		LEFT JOIN USER_TB U ON C.USER_NUM = U.USER_NUM
		<where>
	        <if test="communityCode != null and communityCode != 'all'">
	            AND C.COMMUNITY_CD = #{communityCode}
	        </if>
	
	        <!-- <if test="category != null and category != '' and category != 'all'">
	            AND C.COMMUNITY_CD IN (${category})
	        </if> -->
	        <if test="category != null and category.size() > 0">
		       AND C.COMMUNITY_CD IN
		       <foreach collection="category" item="cat" open="(" separator="," close=")">
		           #{cat}
		       </foreach>
		   </if> 
	
	        <if test="keyword != null and keyword != ''">
	            AND
	            <choose>
	                <when test="condition != null and condition.equals('title')">
	                    C.TITLE LIKE '%' || #{keyword} || '%'
	                </when>
	                <when test="condition != null and condition.equals('writer')">
	                    U.NICK_NAME LIKE '%' || #{keyword} || '%'
	                </when>
	                <when test="condition != null and condition.equals('content')">
	                    C.CONTENT LIKE '%' || #{keyword} || '%'
	                </when>
	                <when test="condition != null and condition.equals('communityCd')">
	                    C.COMMUNITY_CD LIKE '%' || #{keyword} || '%'
	                </when>
	                <when test="condition != null and condition.equals('titleAndContent')">
	                    (C.TITLE LIKE '%' || #{keyword} || '%' OR C.CONTENT LIKE '%' || #{keyword} || '%')
	                </when>
	                <otherwise>
	                    (C.TITLE LIKE '%' || #{keyword} || '%' OR C.CONTENT LIKE '%' || #{keyword} || '%')
	                </otherwise>
	            </choose>
	        </if>
	    </where>
		ORDER BY
	    <choose>
	        <when test="sort == 'views'">
	            VIEWS DESC
	        </when>
	        <when test="sort == 'likes'">
	            recommendCount DESC
	        </when>
	        <otherwise>
	            COMMUNITY_BOARD_ID DESC </otherwise>
	    </choose>
	
	    OFFSET #{offset} ROWS FETCH NEXT #{limit} ROWS ONLY
	</select>
	<!-- <select id="selectList" parameterType="map" resultType="community">
	    SELECT 
	        C.COMMUNITY_BOARD_ID AS communityNo, 
	        C.TITLE AS communityTitle,
	        C.COMMUNITY_CD AS communityCd,
	        U.NICK_NAME AS communityNickname,
	        C.WRITE_DATE AS writeDate, 
	        C.VIEWS AS views,
	        (
	            SELECT COUNT(*)
	            FROM REACTION R
	            WHERE R.TARGET_ID = C.COMMUNITY_BOARD_ID
	            AND R.REACTION_TYPE = 'LIKE'
	        ) AS recommendCount
	    FROM BOARD_COMMUNITY C
	    LEFT JOIN USER_TB U ON C.USER_NUM = U.USER_NUM
	    <where>
	        </where>
	
	    ORDER BY
	    <choose>
	        <when test="sort == 'views'">
	            VIEWS DESC
	        </when>
	        <when test="sort == 'likes'">
	            recommendCount DESC
	        </when>
	        <otherwise>
	            COMMUNITY_BOARD_ID DESC </otherwise>
	    </choose>
	
	    OFFSET #{offset} ROWS FETCH NEXT #{limit} ROWS ONLY
	</select> -->
	
	<!-- 태그기능 -->
	<select id="selectTagByName" parameterType="string" resultType="CommunityTag">
		SELECT TAG_ID AS tagId, TAG_CONTENT AS tagContent
		FROM TAG
		WHERE TAG_CONTENT= #{tagStr}
	</select>
	<insert id="insertTag" parameterType="CommunityTag">
		<selectKey keyProperty="tagId" resultType="_int" order="BEFORE">
	        SELECT TAG_SEQ.NEXTVAL FROM DUAL
	    </selectKey>
	    INSERT INTO TAG (TAG_ID, TAG_CONTENT)
	    VALUES (#{tagId}, #{tagContent})
	</insert>
	<select id="selectTagsByCommunityNo" parameterType="_int" resultType="CommunityTag">
	    SELECT 
	        T.TAG_ID AS tagId,
	        T.TAG_CONTENT AS tagContent
	    FROM TAG T
	    JOIN BOARD_COMMUNITY_TAG BCT ON T.TAG_ID = BCT.TAG_ID
	    WHERE BCT.COMMUNITY_BOARD_ID = #{communityNo}
	</select>	
	<insert id="insertCommunityTag" parameterType="map">
	    INSERT INTO BOARD_COMMUNITY_TAG (COMMUNITY_BOARD_ID, TAG_ID)
	    VALUES (#{communityNo}, #{tagId})
	</insert>
	
	
	<!--  좋아요기능 -->
	<select id="selectCommunityLikeCount" parameterType="int" resultType="int">
	    SELECT COUNT(*) FROM REACTION
	    WHERE TARGET_TYPE = 'community'
	      AND TARGET_ID = #{targetId}
	      AND REACTION_TYPE = 'like'
	</select>
		

	<!-- 게시글 등록 -->
	<insert id="insertCommunity" parameterType="community">
	    INSERT INTO BOARD_COMMUNITY (
	        COMMUNITY_BOARD_ID, 
	        TITLE, 
	        CONTENT,
	        COMMUNITY_CD,
	        USER_NUM,
	        WRITE_DATE
	    ) VALUES (
	        BOARD_COMMUNITY_SEQ.NEXTVAL,
	        #{communityTitle},
	        #{communityContent},
	        #{communityCd},
	        #{communityWriter},
	        #{writeDate}
	    )
	
	    <selectKey keyProperty="communityNo" resultType="_int" order="AFTER">
	        SELECT BOARD_COMMUNITY_SEQ.CURRVAL FROM DUAL
	    </selectKey>
	</insert>

	<!-- 게시글 첨부 이미지 등록 --><!-- 순서 주의 필요 =============오류시 확인해보셈============ -->
	<!-- 다중 인서트문 - mybatis의 fore -->
	<insert id="insertCommunityImgList" parameterType="communityImg">
		 INSERT INTO COMMUNITY_IMG (
	        COMMUNITY_IMG_NO, 
	        ORIGIN_NAME, 
	        CHANGE_NAME, 
	        REF_CNO, 
	        IMG_LEVEL
	    )
	    <foreach collection="list" item="ci" separator=" UNION ALL ">
	        SELECT 
	            SEQ_IMG_NO.NEXTVAL, 
	            #{ci.originName}, 
	            #{ci.changeName}, 
	            #{ci.refCno},      -- communityNo가 아닌, ci 객체 안의 refCno를 사용
	            #{ci.imgLevel}
	        FROM DUAL
	    </foreach>
	</insert>

	<!-- 특정 게시글 번호에 해당하는 게시글 정보를 조회할 때 사용 -->
	 <select id="selectCommunity" resultMap="communityExtResultMap">
		SELECT
			C.COMMUNITY_BOARD_ID AS communityNo,
			C.TITLE AS communityTitle,
			C.CONTENT AS communityContent,
			C.USER_NUM AS communityWriter,
			U.NICK_NAME AS communityNickname,
			C.WRITE_DATE AS writeDate,
			T.COMMUNITY_NAME AS communityCdName,
			C.COMMUNITY_CD AS communityCd,
			C.VIEWS AS views,
			(
				SELECT COUNT(*)
				FROM REACTION R
				WHERE R.TARGET_ID = C.COMMUNITY_BOARD_ID
				AND R.REACTION_TYPE = 'LIKE'
			) AS recommendCount,
			(
				SELECT COUNT(*)
				FROM REACTION R
				WHERE R.TARGET_ID = C.COMMUNITY_BOARD_ID
				AND R.REACTION_TYPE = 'DISLIKE'
			) AS recommendDiscount,
			(
				SELECT COUNT(*)
				FROM BOARD_COMMENT T
				WHERE T.BOARD_ASSORTMENT = 5
					AND REF_NO = C.COMMUNITY_BOARD_ID
			) AS commentCount
			
		FROM BOARD_COMMUNITY c
			LEFT JOIN USER_TB U ON C.USER_NUM=U.USER_NUM
			LEFT JOIN COMMUNITY_TYPE T ON C.COMMUNITY_CD = T.COMMUNITY_CD
		WHERE COMMUNITY_BOARD_ID = #{communityNo}
	</select> 

	<!-- selectBoard 쿼리 결과를 매핑하기 위한 resultMap 정의BOARDWRITER을 USER_NUM으로 바꿈
	게시글 정보와 함께 이미지 리스트(imgList)를 selectBoardImgList 쿼리로 가져와 매핑 -->
	 <resultMap type="communityExt" id="communityExtResultMap">
	  <id column="communityNo" property="communityNo" />
	  <result column="communityTitle" property="communityTitle" />
	  <result column="communityWriter" property="communityWriter" />
	  <result column="communityContent" property="communityContent" />
	  <result column="writeDate" property="writeDate" />
	  <result column="communityNickname" property="communityNickname" />
	  <collection property="imgList" javaType="java.util.List" ofType="communityImg"
        select="selectCommunityImgList" column="communityNo" />
	</resultMap>


	<!-- 게시글 번호에 해당하는 첨부 이미지 리스트를 조회하는 쿼리 -->
	<!-- 이미지 순서대로(IMG_LEVEL 기준) 정렬하여 가져옴 -->
	<select id="selectCommunityImgList" resultType="communityImg">
		SELECT *
		FROM COMMUNITY_IMG
		WHERE REF_CNO = #{communityNo}
		ORDER BY IMG_LEVEL
	</select>

	<!-- 게시글 조회수(Count)를 1 증가시키는 쿼리 -->
	<update id="increaseCount">
		UPDATE BOARD_COMMUNITY 
		SET	VIEWS = VIEWS + 1
		WHERE COMMUNITY_BOARD_ID = #{communityNo}
	</update>

<!-- 아직안쓰는 부분 수정 쿼리-->
	<!-- 게시글 제목과 내용을 수정할 때 사용하는 쿼리 -->
	<update id="updateCommunity">
		UPDATE COMMUNITY SET
		TITLE = #{communityTitle},
		CONTENT = #{communityContent}
		WHERE COMMUNITY_BOARD_ID = #{communityNo}
	</update>
	<!-- 첨부 이미지의 원본 이름과 변경 이름을 수정할 때 사용하는 쿼리 -->
	<update id="updateCommunityImg">
		UPDATE COMMUNITY_IMG SET
		ORIGIN_NAME = #{originName},
		CHANGE_NAME = #{changeName}
		WHERE COMMUNITY_IMG_NO = #{communityImgNo}
	</update>

	<!-- 게시글 첨부 이미지 한 건을 등록할 때 사용하는 INSERT 구문 -->
	<!-- 단일 이미지 등록용 -->
	<insert id="insertCommunityImg">
		INSERT INTO COMMUNITY_IMG
		VALUES(
		SEQ_IMG_NO.NEXTVAL,
		#{originName},
		#{changeName},
		#{refCno},
		#{imgLevel}
		)
	</insert>

	<!-- 게시글 첨부 이미지 여러 건을 삭제할 때 사용하는 쿼리 -->	<!-- 전체삭젲의 위험 -->
	<!-- deleteList 변수에 이미지 번호들을 넣어 삭제 처리 -->
	<delete id="deleteCommunityImg">
		DELETE FROM COMMUNITY_IMG
		WHERE COMMUNITY_IMG_NO IN (${deleteList})
		<!-- ${1234} : (1234) 직접 치환되어 사용 #{1234} : ('1234') 바인딩 변수로 사용 -->
	</delete>
	<!-- =========================오류나면 바꿔
	<delete id="deleteCommunityImg">
	DELETE FROM COMMUNITY_IMG
	WHERE COMMUNITY_IMG_NO IN
	<foreach collection="deleteList" item="imgNo" open="(" separator="," close=")">
		#{imgNo}
	</foreach>
</delete> -->
	

	<!-- 게시글 첨부 이미지의 변경된 파일 이름들만 모두 조회할 때 사용 -->
	<select id="selectFileList" resultType="string">
		SELECT CHANGE_NAME
		FROM COMMUNITY_IMG
	</select>

	<!-- 게시글 유형 리스트를 조회할 때 사용하는 쿼리 -->
	<!-- 게시판 구분 등 게시글 타입 관련 데이터를 가져옴 -->
	<select id="selectCommunityTypeList" resultType="communityType">
		SELECT *
		FROM COMMUNITY_TYPE
	</select>
	
	
	<!-- 좋아요/싫어요 -->
	<!-- 유저가 해당 글에 반응한 내역 조회 -->
<select id="selectUserReaction" resultType="communityReaction">
    SELECT 
    	REACTION_NUM as reactionNo,
        REACTION_USER_NUM as userNum,
        REACTION_TYPE as type
    FROM REACTION 
    WHERE REACTION_USER_NUM = #{userNum} 
      AND TARGET_ID = #{communityNo}
      AND TARGET_TYPE = 'CONTENT'
</select>

<!-- 반응 INSERT -->
<insert id="insertReaction" parameterType="communityReaction">
    INSERT INTO REACTION (
        REACTION_NUM, REACTION_USER_NUM, TARGET_TYPE, TARGET_ID, REACTION_TYPE
    ) VALUES (
        REACTION_SEQ.NEXTVAL,
        #{userNum},
        'CONTENT',
        #{communityNo},
        #{type}
    )
</insert>

<!-- 반응 수정 -->
<update id="updateReaction" parameterType="communityReaction">
    UPDATE REACTION
    SET REACTION_TYPE = #{type}
    WHERE REACTION_USER_NUM = #{userNum}
      AND TARGET_ID = #{communityNo}
       AND TARGET_TYPE = 'CONTENT'
</update>

<!-- 반응 삭제 -->
<delete id="deleteReaction" parameterType="communityReaction">
    DELETE FROM REACTION
    WHERE REACTION_USER_NUM = #{userNum}
      AND TARGET_ID = #{communityNo}
       AND TARGET_TYPE = 'CONTENT'
</delete>

<!-- 좋아요 개수 -->
<select id="getLikeCount" resultType="int">
    SELECT COUNT(*) 
    FROM REACTION 
    WHERE TARGET_ID = #{communityNo}
      AND REACTION_TYPE = 'LIKE'
</select>

<!-- 싫어요 개수 -->
<select id="getDislikeCount" resultType="int">
    SELECT COUNT(*) 
    FROM REACTION 
    WHERE TARGET_ID = #{communityNo}
      AND REACTION_TYPE = 'DISLIKE'
</select>

<!-- 게시글 삭제 -->
<delete id="deleteCommunity" parameterType="_int">
	DELETE FROM BOARD_COMMUNITY
	WHERE COMMUNITY_BOARD_ID = #{communityNo}
</delete>

<!-- 댓글 -->
<select id="selectCommentList" parameterType="_int" resultType="boardComment">
    SELECT
        BC.BOARD_CMT_ID         AS boardCmtId,
        BC.BOARD_CMT_CONTENT    AS boardCmtContent,
        BC.CMT_WRITE_DATE       AS cmtWriteDate,
        BC.REF_NO               AS refNo,
        BC.CMT_WRITER_USER_NUM  AS cmtWriterUserNum,
        U.NICK_NAME             AS nickName,        
        BC.REF_COMMENT_ID       AS refCommentId
    FROM BOARD_COMMENT BC
    JOIN USER_TB U ON BC.CMT_WRITER_USER_NUM = U.USER_NUM
    WHERE BC.REF_NO = #{communityNo}
      AND BC.BOARD_ASSORTMENT = 5
      AND STATUS = 'Y'
    ORDER BY BC.CMT_WRITE_DATE ASC
</select>

<insert id="insertComment" parameterType="boardComment">
    INSERT INTO BOARD_COMMENT (
        BOARD_CMT_ID,
        BOARD_CMT_CONTENT,
        REF_NO,
        CMT_WRITER_USER_NUM,
        BOARD_ASSORTMENT,
        CMT_WRITE_DATE,
        REF_COMMENT_ID
    ) VALUES (
        BOARD_COMMENT_SEQ.NEXTVAL,
        #{boardCmtContent},
        #{refNo},
        #{cmtWriterUserNum},
        5, -- 커뮤니티 게시글
        #{cmtWriteDate},
        
         <choose>
            <when test="refCommentId > 0">
                #{refCommentId}
            </when>
            <otherwise>
               	NULL
            </otherwise>
        </choose>
        
    )
</insert>

<select id="selectComment" parameterType="_int" resultType="boardComment">
    SELECT
        BOARD_CMT_ID AS boardCmtId,
        CMT_WRITER_USER_NUM AS cmtWriterUserNum
    FROM BOARD_COMMENT
    WHERE BOARD_CMT_ID = #{commentNo}
</select>

<!-- 댓글 삭제 -->
<update id="deleteComment" parameterType="_int">
    UPDATE BOARD_COMMENT
    SET STATUS = 'N'
    WHERE BOARD_CMT_ID = #{commentNo}
</update>

</mapper>